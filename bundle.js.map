{"version":3,"file":"bundle.js","sourceRoot":"","sources":["src/GameData.ts","src/gameServer.ts","src/utilapi.ts","src/typings/mgobexsInterface.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nnamespace server {\r\n    export class GameData {\r\n        static async InitGameData() {\r\n            //1.加载配置文件\r\n            //let config = readFile('config.json','utf8',(err,data)=>{\r\n            let p = loadFile('config.json', 'utf8')\r\n            let config = await p\r\n            console.log(config)\r\n        }\r\n    }\r\n}","namespace server {\r\n    export class gameServer implements GameServer.IGameServer{\r\n        /**\r\n         * mode 是游戏 Server 处理客户端消息的模式。\r\n         * 可以取值为 \"sync\" 或 \"async\"。\r\n         * 当 mode 为 \"sync\" 时，游戏 Server 将使用同步模式处理客户端消息。\r\n         * 开发者在 onClientData 回调中必须显式调用 SDK.exitAction 方法，\r\n         * 游戏 Server 才能处理下一条 onClientData 广播。\r\n         * 当 mode 为 \"async\" 时，游戏 Server 将使用异步模式处理客户端消息。\r\n         * 每次监听到 onClientData 广播时都将执行回调函数。\r\n         */\r\n        public mode:'sync'|'async'\r\n\r\n        constructor() {\r\n            this.mode = 'async'\r\n        }\r\n\r\n        /**\r\n         * 初始化游戏数据\r\n         */\r\n        onInitGameData(args: { room: IRoomInfo }) {\r\n            GameData.InitGameData()\r\n            console.log('初始化游戏数据完成')\r\n            return {}\r\n        }\r\n\r\n        /**\r\n         * 监听客户端数据\r\n         */\r\n        onClientData(args: ActionArgs<UserDefinedData>) {\r\n            args.SDK.logger.debug('监听客户端数据')\r\n            //发送消息给客户端\r\n            args.SDK.sendData({ playerIdList: [], data: { msg: 'hello' } })\r\n        }\r\n\r\n        /**\r\n         * 监听加房广播\r\n         */\r\n        onJoinRoom(args: ActionArgs<IJoinRoomBst>) {\r\n            args.SDK.logger.debug('监听加房广播')\r\n        }\r\n\r\n        /**\r\n         * 监听创建房间广播\r\n         */\r\n        onCreateRoom(args: ActionArgs<ICreateRoomBst>) {\r\n            args.SDK.logger.debug('监听创建房间广播')\r\n        }\r\n\r\n        /**\r\n         * 监听退房广播\r\n         */\r\n        onLeaveRoom(args: ActionArgs<ILeaveRoomBst>) {\r\n            args.SDK.logger.debug('监听退房广播')\r\n        }\r\n\r\n        /**\r\n         * 监听玩家被移除广播\r\n         */\r\n        onRemovePlayer(args: ActionArgs<IRemovePlayerBst>) {\r\n            args.SDK.logger.debug('监听退房广播')\r\n        }\r\n\r\n        /**\r\n         * 监听房间销毁广播\r\n         */\r\n        onDestroyRoom(args: ActionArgs<IDestroyRoomBst>) {\r\n            args.SDK.logger.debug('监听房间销毁广播')\r\n        }\r\n\r\n        /**\r\n         * 监听修改房间属性广播\r\n         */\r\n        onChangeRoom(args: ActionArgs<IChangeRoomBst>) {\r\n            args.SDK.logger.debug('监听修改房间属性广播')\r\n        }\r\n\r\n        /**\r\n         * 监听修改玩家自定义状态广播\r\n         */\r\n        onChangeCustomPlayerStatus(args: ActionArgs<IChangeCustomPlayerStatusBst>) {\r\n            args.SDK.logger.debug('监听修改玩家自定义状态广播')\r\n        }\r\n\r\n        /**\r\n         * 监听玩家网络状态变化广播\r\n         */\r\n        onChangedPlayerNetworkState(args: ActionArgs<IChangedPlayerNetworkStateBst>) {\r\n            args.SDK.logger.debug('监听修改玩家自定义状态广播')\r\n        }\r\n\r\n        /**\r\n         * 监听开始/停止帧同步广播\r\n         */\r\n        onMessageRelay(args: ActionArgs<IMessageRelayBst>) {\r\n            args.SDK.logger.debug('监听开始/停止帧同步广播')\r\n        }\r\n    }\r\n}\r\n//将 gameServer 类引用置于 exports 上\r\nvar exports: any;\r\nexports.gameServer = server.gameServer;","\r\nnamespace server {\r\n    export async function loadFile(filepath: string, code: string) {\r\n        return new Promise<string>(function (resolve, reject) {\r\n            fs.readFile(filepath, code, (err, data) => {\r\n                if (err) {\r\n                    reject(err)\r\n                } else {\r\n                    resolve(data)\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","namespace server {\r\n\t//PROTO-STRUCT-BEGIN\r\n\texport interface ICreateRoomBst {\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t}\r\n\texport interface IJoinRoomBst {\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t\tjoinPlayerId?: (string | null);\r\n\t}\r\n\texport interface ILeaveRoomBst {\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t\tleavePlayerId?: (string | null);\r\n\t}\r\n\texport interface IRemovePlayerBst {\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t\tremovePlayerId?: (string | null);\r\n\t\towner?: (string | null);\r\n\t}\r\n\texport interface IChangeRoomBst {\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t\towner?: (string | null);\r\n\t}\r\n\texport interface IChangeCustomPlayerStatusBst {\r\n\t\tchangePlayerId?: (string | null);\r\n\t\tcustomPlayerStatus?: (number | null);\r\n\t\troomId?: (number | null);\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t}\r\n\texport interface IChangedPlayerNetworkStateBst {\r\n\t\tchangePlayerId?: (string | null);\r\n\t\tnetworkState?: (NetworkState | null);\r\n\t\troomId?: (number | null);\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t}\r\n\texport interface IMessageRelayBst {\r\n\t\troomId?: (number | null);\r\n\t\troomInfo?: (IRoomInfo | null);\r\n\t}\r\n\texport interface IDestroyRoomBst {\r\n\t\troomId?: (number | null);\r\n\t}\r\n\texport interface IRoomInfo {\r\n\t\trelaySvrAddr?: (string | null);\r\n\t\troomId?: (number | null);\r\n\t\troomName?: (string | null);\r\n\t\tmaxPlayers?: (number | null);\r\n\t\troomType?: (string | null);\r\n\t\tisViewed?: (boolean | null);\r\n\t\tviewerList?: (IPlayerInfo[] | null);\r\n\t\towner?: (string | null);\r\n\t\tplayerList?: (IPlayerInfo[] | null);\r\n\t\tcustomProperties?: (string | null);\r\n\t\tcreateType?: (CreateType | null);\r\n\t\tisPrivate?: (boolean | null);\r\n\t\tframeStatus?: (FrameStatusType | null);\r\n\t\tframeRate?: (number | null);\r\n\t\tcreateTime?: (number | null);\r\n\t\tstartGameTime?: (number | null);\r\n\t\tteams?: (ITeam[] | null);\r\n\t}\r\n\texport interface IPlayerInfo {\r\n\t\tplayerId?: (string | null);\r\n\t\tplayerName?: (string | null);\r\n\t\tcustomPlayerStatus?: (number | null);\r\n\t\tnetworkStatus?: (NetworkState | null);\r\n\t\tcustomProfile?: (string | null);\r\n\t\trelayNetworkStatus?: (NetworkState | null);\r\n\t\tteamId?: (string | null);\r\n\t}\r\n\texport enum CreateType {\r\n\t\tCOMMONCREATE = 0,\r\n\t\tMATCHCREATE = 1\r\n\t}\r\n\texport enum FrameStatusType {\r\n\t\tSTOP = 0,\r\n\t\tSTART = 1\r\n\t}\r\n\texport interface ITeam {\r\n\t\tteamId?: (string | null);\r\n\t\tname?: (string | null);\r\n\t\tminPlayers?: (number | null);\r\n\t\tmaxPlayers?: (number | null);\r\n\t}\r\n\texport enum NetworkState {\r\n\t\tROOM_OFFLINE = 0,\r\n\t\tROOM_ONLINE = 1,\r\n\t\tRELAY_OFFLINE = 2,\r\n\t\tRELAY_ONLINE = 3\r\n\t}\r\n\t//PROTO-STRUCT-END\r\n\r\n\texport interface GameData {\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\texport interface UserDefinedData {\r\n\t\t[key: string]: any;\r\n\t}\r\n\r\n\tinterface ActionArgsExports {\r\n\t\tdata: GameData\r\n\t}\r\n\r\n\tinterface ActionArgsSDKLogger {\r\n\t\tdebug: (...args: any[]) => void;\r\n\t\tinfo: (...args: any[]) => void;\r\n\t\terror: (...args: any[]) => void;\r\n\t}\r\n\r\n\tinterface ActionArgsSDK {\r\n\t\t/**\r\n\t\t * 游戏 Server 向客户端推送消息。\r\n\t\t */\r\n\t\tsendData(data: { playerIdList: string[]; data: UserDefinedData; }, resendConf?: { timeout: number; maxTry: number; }): void\r\n\t\t/**\r\n\t\t * 模拟客户端给游戏 Server 发送数据。\r\n\t\t */\r\n\t\tdispatchAction(actionData: UserDefinedData): void\r\n\t\t/**\r\n\t\t * `清空 onClientData 队列` 当 gameServer.mode 为 \"sync\" 时，gameServer.onClientData 广播会保存在一个队列里面，在 gameServer.onClientData 回调函数中通过调用 SDK.exitAction 才能处理下一条 gameServer.onClientData 广播。SDK.clearAction 作用就是清空 gameServer.onClientData 队列，可用于游戏结束后游戏 Server 忽略客户端消息的场景。\r\n\t\t */\r\n\t\tclearAction(): void\r\n\t\t/**\r\n\t\t * 当 gameServer.mode 为 \"sync\" 时，需要在 gameServer.onClientData 回调里面显式调用 SDK.exitAction 方法才能继续处理下一条 gameServer.onClientData 广播消息。\r\n\t\t */\r\n\t\texitAction(): void\r\n\t\t/**\r\n\t\t * SDK 提供的日志记录能力。\r\n\t\t * 记录的日志可以在 MGOBE 控制台的游戏 Server 页面查看。\r\n\t\t */\r\n\t\tlogger: ActionArgsSDKLogger\r\n\t}\r\n\r\n\texport interface ActionArgs<T> {\r\n\t\t/** \r\n\t\t * 该属性在 gameServer.onClientData 中有效，其类型为 string，\r\n\t\t * 表示消息发送者的玩家 ID。 \r\n\t\t **/\r\n\t\tsender: string;\r\n\t\t/** \r\n\t\t * 该属性在 gameServer 不同回调中的类型不同，表示该回调的\r\n\t\t * 响应数据。比如在 gameServer.onClientData 中表示玩家发\r\n\t\t * 送给游戏 Server 的数据；在 onJoinRoom 表示加房广播数据；\r\n\t\t * 在 onLeaveRoom 中表示玩家退房广播数据。 \r\n\t\t **/\r\n\t\tactionData: T;\r\n\t\t/**\r\n\t\t * 该属性类型为 GameData，表示游戏数据，开发者可以用来实现\r\n\t\t * 游戏状态同步等功能。在第一次执行 gameServer.onClientData \r\n\t\t * 时会被初始化，在执行 gameServer.onDestroyRoom 时会被销毁。\r\n\t\t */\r\n\t\tgameData: GameData;\r\n\t\t/**\r\n\t\t * 该属性类型为 IRoomInfo，表示当前房间信息。\r\n\t\t */\r\n\t\troom: IRoomInfo\r\n\t\t/**\r\n\t\t * 该属性类型为 object，包含了一个类型为 GameData 的子属性 \r\n\t\t * data，用于更新游戏数据 gameData。\r\n\t\t */\r\n\t\texports: ActionArgsExports\r\n\t\t/** \r\n\t\t * 包含了一系列游戏 Server 提供的方法。 \r\n\t\t **/\r\n\t\tSDK: ActionArgsSDK\r\n\t}\r\n\r\n\texport namespace GameServer {\r\n\t\texport type Receiver<T> = (data: ActionArgs<T>) => void;\r\n\r\n\t\texport type onClientData = Receiver<UserDefinedData>;\r\n\r\n\t\texport type onCreateRoom = Receiver<ICreateRoomBst>;\r\n\t\texport type onJoinRoom = Receiver<IJoinRoomBst>;\r\n\t\texport type onLeaveRoom = Receiver<ILeaveRoomBst>;\r\n\t\texport type onRemovePlayer = Receiver<IRemovePlayerBst>;\r\n\t\texport type onChangeRoom = Receiver<IChangeRoomBst>;\r\n\t\texport type onChangeCustomPlayerStatus = Receiver<IChangeCustomPlayerStatusBst>;\r\n\t\texport type onChangedPlayerNetworkState = Receiver<IChangedPlayerNetworkStateBst>;\r\n\t\texport type onMessageRelay = Receiver<IMessageRelayBst>;\r\n\t\texport type onDestroyRoom = Receiver<IDestroyRoomBst>;\r\n\r\n\t\texport interface IGameServer {\r\n\t\t\tmode?: 'async' | 'sync';\r\n\t\t\tonInitGameData(args: { room: IRoomInfo }): GameData;\r\n\t\t\tonClientData: onClientData;\r\n\t\t\tonCreateRoom?: onCreateRoom;\r\n\t\t\tonJoinRoom?: onJoinRoom;\r\n\t\t\tonLeaveRoom?: onLeaveRoom;\r\n\t\t\tonRemovePlayer?: onRemovePlayer;\r\n\t\t\tonChangeRoom?: onChangeRoom;\r\n\t\t\tonChangeCustomPlayerStatus?: onChangeCustomPlayerStatus;\r\n\t\t\tonChangedPlayerNetworkState?: onChangedPlayerNetworkState;\r\n\t\t\tonMessageRelay?: onMessageRelay;\r\n\t\t\tonDestroyRoom?: onDestroyRoom;\r\n\t\t}\r\n\t}\r\n}"]}